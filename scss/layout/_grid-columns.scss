// ==========================================================================
// Grid Columns (Layout)
// ==========================================================================

// Generate Column Classes

[class^="column--"] {
  padding: 0 ($column-padding + px);
  position: relative;
}

@for $i from 1 through $grid-column-count {
  .column--sm--#{$i} {
    @media (min-width: $brkpoint-sm) {
      width: percentage($i / $grid-column-count);
      float: left;
      min-height: 1px;
    }
  }
}
@for $i from 1 through $grid-column-count {
  .column--md--#{$i}{
    @media (min-width: $brkpoint-md) {
      width: percentage($i / $grid-column-count);
      float: left;
      min-height: 1px;
      padding: 0 ($column-padding + px);
    }
  }
}
@for $i from 1 through $grid-column-count {
  .column--lg--#{$i} {
    @media (min-width: $brkpoint-lg) {
      width: percentage($i / $grid-column-count);
      float: left;
      min-height: 1px;
    }
  }
}

@for $i from 1 through $grid-column-count {
  .right--#{$i} {
    left: percentage($i / $grid-column-count);
    @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
      left: auto;
    }
  }
  .left--#{$i} {
    right: percentage($i / $grid-column-count);
    @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
      right: auto;
    }
  }
}



//flex

@mixin grid-order($order: 0) {
  order: $order;
}



@mixin grid-offset($offset: false) {
  @if ($offset != false) {
    margin-left: percentage($offset / $grid-column-count);
  }
}


@mixin grid-orient($direction: horizontal) {
  @if ($direction == vertical) {
    flex-flow: column nowrap;
    align-items: stretch;
  }
  @else {
    flex-flow: row wrap;
  }
}

@mixin grid-align($align: left) {
  $options: (
          left: flex-start,
          right: flex-end,
          center: center,
          justify: space-between,
          spaced: space-around,
  );
  justify-content: map-get($options, $align);
}

@mixin grid-wrap($wrap: true) {
  @if $wrap {
    flex-wrap: wrap;
    align-items: flex-start;
  }
  @else {
    flex-wrap: nowrap;
    align-items: stretch;
  }
}

@mixin grid-frame($size: expand, $vertical: false, $wrap: false, $align: left, $order: 0) {
  display: flex;
  height: 100vh;
  position: relative;
  overflow: hidden;

  @include grid-size($size);
  @include grid-orient($vertical);
  @include grid-wrap($wrap);
  @include grid-align($align);
  @include grid-order($order);
}

@mixin grid-size($size: expand) {
  @if (type-of($size) == 'number') {
    flex: 0 0 percentage($size / $grid-column-count);
  }
  @else if ($size == shrink) {
    flex: 0 0 auto;
  }
  @else if ($size == expand) {
    flex: 1 1;
  }
}

%block-core {
  // Prevent flicker when grid items shift around
  // transition: all 300ms ease;
  backface-visibility: hidden;

  // Block alignment
  &.align-right   { @include grid-align(right); }
  &.align-center  { @include grid-align(center); }
  &.align-justify { @include grid-align(justify); }
  &.align-spaced  { @include grid-align(spaced); }

  // Stretch children along cross-axis
  &.wrap { @include grid-wrap(true); }
}

.grid-frame {
  @extend %block-core;
  @include grid-frame;
}

@mixin grid-block($size: expand, $vertical: false, $wrap: false, $align: left, $order: 0) {
  @include grid-frame($size, $vertical, $wrap, $align, $order);

  // Reset the height used by frames
  height: auto;

  // Blocks will scroll by default if their content overflows
  @if ($vertical) {
    overflow-x: auto;
  }
  @else {
    overflow-y: auto;
  }

  // Add scrolling with inertia
  -webkit-overflow-scrolling: touch;
  -ms-overflow-style: -ms-autohiding-scrollbar;
}

%grid-block {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100vh;
  position: relative;
  overflow: hidden;
  -webkit-flex: 1 1;
  -ms-flex: 1 1;
  flex: 1 1;
  -webkit-flex-flow: row wrap;
  -ms-flex-flow: row wrap;
  flex-flow: row wrap;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  -webkit-align-items: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  justify-content: flex-start;
  -webkit-order: 0;
  -ms-flex-order: 0;
  order: 0;
  height: auto;
  overflow-y: auto;
  -webkit-overflow-scrolling: touch;
  -ms-overflow-style: -ms-autohiding-scrollbar;

}

.grid-block {
  @extend %grid-block;
  @extend %block-core;
  // Orientation classes
  &.vertical {
    @include grid-orient(vertical);
  }
  &.sm--vertical {
    @media (min-width: $brkpoint-sm) {
      @include grid-orient(vertical);
    }
    &--only {
      @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
        @include grid-orient(vertical);
      }
    }
  }
  &.md--vertical {
    @media (min-width: $brkpoint-md) {
      @include grid-orient(vertical);
    }
    &--only {
      @media (min-width: $brkpoint-md) and (max-width: $brkpoint-lg) {
        @include grid-orient(vertical);
      }
    }
  }
  &.lg--vertical {
    @media (min-width: $brkpoint-lg) {
      @include grid-orient(vertical);
    }
  }

  &.sm--horizontal {
    @media (min-width: $brkpoint-sm) {
      @include grid-orient(horizontal);
    }
    &--only {
      @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
        @include grid-orient(horizontal);
      }
    }
  }
  &.md--horizontal {
    @media (min-width: $brkpoint-md) {
      @include grid-orient(horizontal);
    }
    &--only {
      @media (min-width: $brkpoint-md) and (max-width: $brkpoint-lg) {
        @include grid-orient(horizontal);
      }
    }
  }
  &.lg--horizontal {
    @media (min-width: $brkpoint-lg) {
      @include grid-orient(horizontal);
    }
  }




  @for $i from 1 through $grid-column-count {
    &--md--#{$i}{
      @extend %grid-block;
      @extend %block-core;
      @media (min-width: $brkpoint-md) {
        flex: 0 0 percentage($i / $grid-column-count);
      }
    }
  }
  @for $i from 1 through $grid-column-count {
    &--lg--#{$i} {
      @extend %grid-block;
      @extend %block-core;
      @media (min-width: $brkpoint-lg) {
        flex: 0 0 percentage($i / $grid-column-count);
        min-height: 1px;
      }
    }
  }
}

