// ==========================================================================
// Grid Columns (Layout)
// ==========================================================================

// Generate Column Classes

[class^="column--"] {
  padding: 0 ($column-padding + px);
  position: relative;
}

@for $i from 1 through $grid-column-count {
  .column--sm--#{$i} {
    @media (min-width: $brkpoint-sm) {
      width: percentage($i / $grid-column-count);
      float: left;
      min-height: 1px;
    }
  }
}
@for $i from 1 through $grid-column-count {
  .column--md--#{$i}{
    @media (min-width: $brkpoint-md) {
      width: percentage($i / $grid-column-count);
      float: left;
      min-height: 1px;
      padding: 0 ($column-padding + px);
    }
  }
}
@for $i from 1 through $grid-column-count {
  .column--lg--#{$i} {
    @media (min-width: $brkpoint-lg) {
      width: percentage($i / $grid-column-count);
      float: left;
      min-height: 1px;
    }
  }
}

@for $i from 1 through $grid-column-count {
  .right--#{$i} {
    left: percentage($i / $grid-column-count);
    @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
      left: auto;
    }
  }
  .left--#{$i} {
    right: percentage($i / $grid-column-count);
    @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
      right: auto;
    }
  }
}



// flex
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex:  $values;
  -webkit-flex:  $values;
  -ms-flex:  $values;
  flex:  $values;
}

@mixin order($val) {
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
  order: $val;
}

@mixin orient($direction: horizontal) {
  @if ($direction == vertical) {
    flex-flow: column nowrap;
    align-items: stretch;
  }
  @else {
    flex-flow: row wrap;
  }
}

@mixin align($val) {
  @if $val == right {
    -webkit-justify-content: flex-end;
    -ms-flex-pack: end;
    justify-content: flex-end;
  } @else if $val == left {
    -webkit-justify-content: flex-start;
    -ms-flex-pack: start;
    justify-content: flex-start;
  } @else if $val == justify {
    -webkit-justify-content: space-between;
    -ms-flex-pack: justify;
    justify-content: space-between;
  } @else if $val == center {
    -webkit-justify-content: center;
    -ms-flex-pack: center;
    justify-content: center;
  } @else if $val == spaced {
    -webkit-justify-content: space-around;
    -ms-flex-pack: distribute;
    justify-content: space-around;
  } @else {
    @error "$val must == 'right', 'left', 'justify', 'center', or 'spaced'"
  }
}

@mixin wrap($val:wrap) {
  -webkit-flex-wrap: $val;
  -ms-flex-wrap: $val;
  flex-wrap: $val;
  overflow: visible;
}

%grid-core {
  @include flexbox;
}

%grid-block-core {
  @include flex(1);
}

.grid {
  @extend %grid-core;
  /* With gutters */
  margin-left: -($key-number+px);
  margin-right: -($key-number+px);
  > [class^="grid-block"] {
    padding-left: ($key-number+px);
    padding-right: ($key-number+px);
  }
  &.no-gutters {
    margin-left: 0;
    margin-right: 0;
    > [class^="grid-block"] {
      padding-left: 0;
      padding-right: 0;
    }
  }
  &--align--left {
    @include align(left);
  }
  &--align--right {
    @include align(right);
  }
  &--align--center {
    @include align(center);
  }
  &--align--justify {
    @include align(justify);
  }
  &--align--spaced {
    @include align(spaced);
  }
  &--vertical {
    @include orient(vertical);
    &--sm--only {
      @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
        @include orient(vertical);
      }
    }
  }
  @for $i from 1 through $grid-column-count {
    &.blocks--#{$i} {
      @include wrap();
      > .grid-block {
        flex: 0 0 percentage(1 / $i);
      }
    }
    &.blocks--#{$i}--sm--only {
      @include wrap();
      @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
        > .grid-block {
          flex: 0 0 percentage(1 / $i);
        }
      }
    }
  }
}

.grid-block {
  @extend %grid-block-core;
  // general sizing
  @for $i from 1 through $grid-column-count {
    &--#{$i} {
      flex: 0 0 percentage($i / $grid-column-count);
    }
    &--#{$i}--sm--only {
      @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
        flex: 0 0 percentage($i / $grid-column-count);
      }
    }
    &--#{$i}--md {
      @media (min-width: $brkpoint-md) {
        flex: 0 0 percentage($i / $grid-column-count);
      }
    }
    &--order--#{$i} {
      @include order($i);
    }
    &--order--#{$i}--sm--only {
      @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
        @include order($i);
      }
    }
  }
}

/* Alignment per row */
.grid--top {
  align-items: flex-start;
}
.grid--bottom {
  align-items: flex-end;
}
.grid--center {
  align-items: center;
}

/* Alignment per cell */
.grid-block--top {
  align-self: flex-start;
}
.grid-block--bottom {
  align-self: flex-end;
}
.grid-block--center {
  align-self: center;
}

